{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2QAiBeA,EAdA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACI,6BACI,yBAAKC,UAAU,mCACX,uBAAGC,KAAK,KAAKD,UAAU,cAAcD,M,cCKtCG,EATD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACI,uBAAGH,UAAU,sBAAsBG,ICqF5BC,EAtFI,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,iBAAsB,EAElCC,oBAAS,GAFyB,mBAE1DC,EAF0D,KAEnDC,EAFmD,KAK1DC,EAAiBN,EAAjBM,OAAQC,EAASP,EAATO,KAGVC,EAAe,SAAAC,GAEjBR,EAAgB,2BACTD,GADQ,kBAEVS,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAoBlC,OACI,0BACIC,SAjBa,SAAAJ,GACjBA,EAAEK,iBAGmB,KAAlBR,EAAOS,QAAiC,KAAhBR,EAAKQ,QAKhCV,GAAa,GAGbH,GAAiB,IAPbG,GAAa,KAcXD,EAAQ,kBAAC,EAAD,CAAON,QAAQ,kCAAqC,KAC9D,yBAAKH,UAAU,wBACX,2BACIqB,KAAK,OACLL,KAAK,SACLM,GAAG,SACHL,MAAON,EACPY,SAAUV,IAEd,2BAAOW,QAAQ,UAAf,cAEJ,yBAAKxB,UAAU,wBACX,4BACIgB,KAAK,OACLM,GAAG,OACHL,MAAOL,EACPW,SAAUV,GAEV,4BAAQI,MAAM,IAAd,gCACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,cAEJ,2BAAOO,QAAQ,QAAf,eAGJ,yBAAKxB,UAAU,uBACX,2BACIqB,KAAK,SACLJ,MAAM,eACNjB,UAAU,oEC5CfyB,EA9BD,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEJV,EAAeU,EAAfV,KAAMW,EAASD,EAATC,KAEd,IAAKX,EAAM,OAAO,KAIlB,OACI,yBAAKhB,UAAU,4BACX,yBAAKA,UAAU,cACX,2CAAiBgB,EAAjB,QACA,uBAAGhB,UAAU,eACP4B,WAAWD,EAAKE,KANnB,OAMkC,IAAIC,QAAQ,GADjD,IACsD,yCAEtD,qDACMF,WAAWD,EAAKI,SATnB,OASsC,IAAID,QAAQ,GADrD,IAC0D,yCAE1D,kDACMF,WAAWD,EAAKK,SAZnB,OAYsC,IAAIF,QAAQ,GADrD,IAC0D,4CCsD3DG,MAtEf,WAAe,IAsCTC,EAtCS,EAGyB1B,mBAAS,CAC7CG,OAAQ,GACRC,KAAM,KALK,mBAGLP,EAHK,KAGKC,EAHL,OAQyBE,oBAAS,GARlC,mBAQN2B,EARM,KAQK5B,EARL,OASyBC,mBAAS,IATlC,mBASNkB,EATM,KASKU,EATL,OAUmB5B,oBAAS,GAV5B,mBAULC,EAVK,KAUEC,EAVF,KAWLC,EAAiBN,EAAjBM,OAAQC,EAASP,EAATO,KAkChB,OAhCAyB,qBAAU,YAEU,uCAAG,gCAAAC,EAAA,0DAChBH,EADgB,uBAEH,mCACRI,EAHW,2DAG+C5B,EAH/C,YAGyDC,EAHzD,kBAEH,oCAFG,SAKO4B,MAAMD,GALb,cAKXE,EALW,gBAMOA,EAAUC,OANjB,OAMXhB,EANW,OAQjBU,EAAiBV,GACjBnB,GAAiB,GAGM,QAAlBmB,EAAUiB,IACXjC,GAAa,GAEbA,GAAa,GAfA,4CAAH,qDAmBlBkC,KAEC,CAACT,IAIFD,EADCzB,EACY,kBAAC,EAAD,CAAON,QAAQ,sBAEf,kBAAC,EAAD,CAAOuB,UAAWA,IAI/B,kBAAC,WAAD,KACE,kBAAC,EAAD,CACE3B,OAAO,mBAET,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEK,SAAUA,EACVC,gBAAiBA,EACjBC,iBAAkBA,KAGtB,yBAAKP,UAAU,cACZkC,QCvDKW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMsD,a","file":"static/js/main.ec80903b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo:  PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className=\"red darken-4 error\">{mensaje}</p>\r\n    );\r\n}\r\n \r\nError.propTypes = {\r\n    mensaje:  PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({busqueda, guardarBusqueda, guardarConsultar}) => {\r\n\r\n    const [ error, guardarError ] = useState(false);\r\n\r\n    // extraer ciudad y pais\r\n    const { ciudad, pais } = busqueda;\r\n\r\n    // función que coloca los elementos en el state\r\n    const handleChange = e => {\r\n        // actualizar el state\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]: e.target.value \r\n        });\r\n    }\r\n\r\n    // Cuando el usuario da submit al form\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(ciudad.trim() === '' || pais.trim() === '') {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        guardarError(false);\r\n\r\n        // pasarlo al componente principal\r\n        guardarConsultar(true);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            { error ? <Error mensaje=\"Ambos campos son obligatorios\" /> : null}\r\n            <div className=\"input-field cold s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id=\"ciudad\"\r\n                    value={ciudad}\r\n                    onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"ciudad\"> Ciudad: </label>\r\n            </div>\r\n            <div className=\"input-field cold s12\">\r\n                <select\r\n                    name=\"pais\"\r\n                    id=\"pais\"\r\n                    value={pais}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">-- Selecciones un país --</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"CL\">Chile</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                    <option value=\"EC\">Ecuador</option>\r\n                    <option value=\"VE\">Venezuela</option>\r\n                </select>\r\n                <label htmlFor=\"pais\"> País: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Buscar Clima\"\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n \r\nFormulario.propTypes = {\r\n    busqueda:  PropTypes.object.isRequired,\r\n    guardarBusqueda:  PropTypes.func.isRequired,\r\n    guardarConsultar:  PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Clima = ({resultado}) => {\r\n\r\n    const { name, main } = resultado; \r\n\r\n    if (!name) return null;\r\n\r\n    // Grados kelvin\r\n    const kelvin = 273.15;\r\n    return ( \r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\">\r\n                <h2>El clima de {name} es:</h2>\r\n                <p className=\"temperatura\">\r\n                    { parseFloat(main.temp - kelvin, 10).toFixed(2) } <span>&#x2103;</span>\r\n                </p>\r\n                <p> Temperatura Máxima:\r\n                    { parseFloat(main.temp_max - kelvin, 10).toFixed(2) } <span>&#x2103;</span>\r\n                </p>\r\n                <p> Temperatura Minima:\r\n                    { parseFloat(main.temp_min - kelvin, 10).toFixed(2) } <span>&#x2103;</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nClima.propTypes = {\r\n    resultado:  PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Clima from './components/Clima';\nimport Error from './components/Error';\n\nfunction App() {\n\n  // state del formulario\n  const [ busqueda, guardarBusqueda ] = useState({\n    ciudad: '',\n    pais: ''\n  });\n\n  const [consultar, guardarConsultar] = useState(false); \n  const [resultado, guardarResultado] = useState({});\n  const [ error, guardarError ] = useState(false);\n  const { ciudad, pais } = busqueda;\n\n  useEffect(() => {\n    // console.log(ciudad);\n    const consultarApi = async () => {\n      if(consultar) {\n        const appId = '40c594913d142621459222ad829a10a4';\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n\n        guardarResultado(resultado);\n        guardarConsultar(false);\n\n        // Detecta si hubo resultados correctos en la cosulta\n          if(resultado.cod === '404') {\n            guardarError(true);\n          } else {\n            guardarError(false);\n          }\n      }\n    } \n    consultarApi();\n    // eslint-disable-next-line\n  }, [consultar]);\n\n  let componente;\n  if(error) {\n    componente = <Error mensaje=\"No hay resultados\" />\n  } else {\n    componente = <Clima resultado={resultado} />\n  }\n\n  return (\n    <Fragment>\n      <Header\n        titulo=\"Clima Reat App\"\n      />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario \n                busqueda={busqueda}\n                guardarBusqueda={guardarBusqueda}\n                guardarConsultar={guardarConsultar}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}